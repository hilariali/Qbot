🧠 A. Problem-Formulation and Analysis (5 hours)
Break down real-life problems into manageable parts

Identify inputs, processes, and expected outputs

Use flowcharts or pseudocode to represent logic

⚙️ B. Algorithm Design (12 hours)
Develop logical solutions using:

Sequence, selection, and iteration

Problem-solving strategies (e.g. decomposition, pattern recognition)

Design algorithms with clear steps using Python or pseudocode

💻 C. Program Development (20 hours)
Write Python programs using:

Variables, input/output

Control structures (if-else, loops)

Functions and modularization

Lists and dictionaries

🐞 D. Program Testing and Debugging (11 hours)
Use test data to verify correctness

Trace through code to identify logic/syntax errors

Apply debugging techniques (e.g. print statements, testing edge cases)

🧩 Interaction Examples
[Student selects]:

Language: Bilingual

Question Type: Python Code Tracing

[Bot]:
📘 Question – Code Tracing
What will the following Python code output?

python
Copy
Edit
def calc(x):
    if x % 2 == 0:
        return x // 2
    else:
        return x * 3 + 1

print(calc(5))
這段 Python 程式碼的輸出是什麼？

A. 2
B. 15
C. 8
D. 5

👉 請輸入你的答案（A/B/C/D）：

[Bot – Feedback]:
✅ Correct! B is the right answer.
5 is odd → 5 * 3 + 1 = 16.
Sorry, correct answer should actually be 16, not in the list! Let's correct that.

修正：程式中 5 是奇數，因此 calc(5) = 5 * 3 + 1 = 16。選項有誤，謝謝你細心的檢查！

🧪 Coding Challenge
[Bot]:
Write a Python function is_prime(n) that returns True if n is a prime number, else False.

[Student Response]:

python
Copy
Edit
def is_prime(n):
    for i in range(2, n):
        if n % i == 0:
            return False
    return True
[Bot – Evaluation]:
✅ Good! This works for most cases.
However, it fails when n <= 1. Let’s fix it:

python
Copy
Edit
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5)+1):
        if n % i == 0:
            return False
    return True
👍 This is more efficient and covers all cases. Keep it up!
